{"version":3,"sources":["YoutubeController.js"],"names":["getYoutubeID","url","undefined","match","length","tag","document","createElement","src","player","onYouTubeIframeAPIReady","youtubeItems","Array","from","querySelectorAll","i","idRandom","substring","setAttribute","getTime","getAttribute","elementId","YT","Player","height","width","videoId","events","onReady","onStateChange","playerVars","autoplay","rel","showinfo","controls","$","each","id","on","addClass","not","this","removeClass","title","description","find","html","date","imageThumbnail","concat","attr","onPlayerReady","event","firstScriptTag","getElementsByTagName","done","onPlayerStateChange","data","PlayerState","PLAYING","setTimeout","stopVideo"],"mappings":"aACA,IAAMA,aAAe,SAACC,GADtB,QAAAC,IAAAD,EAQG,OAAA,EAPH,IACKA,EAAQC,EAAAA,MADPF,+EAEJ,SAAAG,GAAa,IAAHA,EAAG,GAAAC,SACTD,EAAQF,IAWdI,IAAAC,SAAAC,cAAA,UAGAF,IAAIG,IAAM,qCAFV,IAUIC,OAVAJ,eAAeE,SAAAA,qBAAnB,UAAA,GAYA,SAASG,0BAER,IADA,IAAMC,EAAeC,MAAMC,KAAKP,SAASQ,iBAAiB,iBACjDC,EAAI,EAAGA,EAAIJ,EAAaP,OAAQW,IAAK,CAA9C,IAAKC,GAAY,IAAGL,MAAAA,UAAaP,SAAa,IAAAa,UAAA,GAC7CN,EAAMK,GAAQE,aAAcC,KAAXH,GACjBL,IAAAA,EAAgBO,EAAaH,GAAAK,aAA7B,MACMC,EAASrB,aAAGW,EAAgBS,GAAAA,aAAlC,aAIAX,OAAM,IAAGa,GAAIA,OAAGC,EAAP,CACRC,OAAAA,OACAC,MAAAA,OACAC,QAAAA,EACAC,OAAAA,CACCC,QAAAA,cACAC,cAAAA,qBAEDC,WAAAA,CACCC,SAAAA,EACAC,IAAAA,EACAC,SAAAA,EACAC,SAAAA,KAKHC,EAAC,gCAGAA,EAAA,gCAAyBC,KAAzB,WACA,IAAMC,EAAKrC,EAAAA,MAAAA,KAAaC,YACtBoC,EAAMC,aAAYrC,GACnBkC,EAAAA,MAAEG,GAAF,QAAA,WACAH,EAAAA,MAAEI,SAAA,UACF9B,EAAAA,gCAAA+B,IAAAC,MAAAC,YAAA,UACAjC,OAAMkC,cAASN,GACf,IAAAM,EAAMC,EAAAA,MAAeC,KAAA,YAAYC,OACjCF,EAAcT,EAAOU,MAAKA,KAAA,eAA1BC,OACEC,EAAAZ,EAAAM,MAAAI,KAAA,eAAAC,OACFX,EAAAA,uCAACW,KAAuCA,GACxCX,EAAAA,sCAAEW,KAADF,GACDT,EAVD,0CAYAW,KAAAC,KAGA,IAlBDC,EAAA,0BAAAC,OAAAZ,EAAA,kBAqBDF,EAAAM,MAAAI,KAAA,YAAAK,KAAA,MAAAF,KAOA,SAAAG,cAAAC,IAjEA9C,SAAI+C,cAAiB/C,QAASgD,YAAAA,KAsE7B,IAAAC,MAAS,EAERA,SAAIC,oBAAJJ,GACAA,EAAAK,MAAAnC,GAAAoC,YAAAC,SAAAJ,OACDK,WAAAC,UAAA,KAFCN,MAAO,GAIT,SAASM,YACRpD,OAAOoD","file":"YoutubeController.min.js","sourcesContent":["// Get youtube ID from URL\r\nconst getYoutubeID = (url) => {\r\n\tif (url !== undefined) {\r\n\t\tvar regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#\\&\\?]*).*/;\r\n\t\tvar match = url.match(regExp);\r\n\t\tif (match && match[7].length == 11) {\r\n\t\t\treturn match[7];\r\n\t\t} else {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t} else {\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n// This code loads the IFrame Player API code asynchronously.\r\nvar tag = document.createElement('script');\r\n\r\ntag.src = 'https://www.youtube.com/iframe_api';\r\nvar firstScriptTag = document.getElementsByTagName('script')[3];\r\n\r\ndocument.querySelector('body').appendChild(tag);\r\n// firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\r\n\r\n// This function creates an <iframe> (and YouTube player)\r\n//    after the API code downloads.\r\nvar player;\r\n\r\nfunction onYouTubeIframeAPIReady() {\r\n\tconst youtubeItems = Array.from(document.querySelectorAll('.youtube-api'));\r\n\tfor (let i = 0; i < youtubeItems.length; i++) {\r\n\t\tconst idRandom = new Date().getTime().toString(32).substring(4);\r\n\t\tyoutubeItems[i].setAttribute('id', idRandom);\r\n\t\tconst elementId = youtubeItems[i].getAttribute('id');\r\n\t\tconst videoId = getYoutubeID(youtubeItems[i].getAttribute('data-url'));\r\n\t\t(';');\r\n\r\n\t\tplayer = new YT.Player(elementId, {\r\n\t\t\theight: '100%',\r\n\t\t\twidth: '100%',\r\n\t\t\tvideoId: videoId,\r\n\t\t\tevents: {\r\n\t\t\t\tonReady: onPlayerReady,\r\n\t\t\t\tonStateChange: onPlayerStateChange,\r\n\t\t\t},\r\n\t\t\tplayerVars: {\r\n\t\t\t\tautoplay: 0,\r\n\t\t\t\trel: 0,\r\n\t\t\t\tshowinfo: 0,\r\n\t\t\t\tcontrols: 0,\r\n\t\t\t},\r\n\t\t});\r\n\t}\r\n\r\n\t$('.slider-thumnail-video .item');\r\n\r\n\t$('.slider-thumnail-video .item').each(function () {\r\n\t\tconst url = $(this).attr('data-url');\r\n\t\tconst id = getYoutubeID(url);\r\n\t\t$(this).on('click', function () {\r\n\t\t\t$(this).addClass('active');\r\n\t\t\t$('.slider-thumnail-video .item').not(this).removeClass('active');\r\n\t\t\tplayer.loadVideoById(id);\r\n\t\t\tconst title = $(this).find('.text h3').html();\r\n\t\t\tconst description = $(this).find('.text p.d-n').html();\r\n\t\t\tconst date = $(this).find('.text .date').html();\r\n\t\t\t$('.index-10 .review-video .content h3').html(title);\r\n\t\t\t$('.index-10 .review-video .content p').html(description);\r\n\t\t\t$('.index-10 .review-video .content .date').html(date);\r\n\t\t});\r\n\r\n\t\t// Get Video Thumbnail\r\n\t\tconst imageThumbnail = `http://i3.ytimg.com/vi/${id}/hqdefault.jpg`;\r\n\t\t$(this).find('.img img').attr('src', imageThumbnail);\r\n\t});\r\n}\r\n\r\n// OFF AUTOUPLAY\r\n// 4. The API will call this function when the video player is ready.\r\nfunction onPlayerReady(event) {\r\n\t// event.target.playVideo();\r\n}\r\n\r\n// 5. The API calls this function when the player's state changes.\r\n//    The function indicates that when playing a video (state=1),\r\n//    the player should play for six seconds and then stop.\r\nvar done = false;\r\n\r\nfunction onPlayerStateChange(event) {\r\n\tif (event.data == YT.PlayerState.PLAYING && !done) {\r\n\t\tsetTimeout(stopVideo, 6000);\r\n\t\tdone = true;\r\n\t}\r\n}\r\n\r\nfunction stopVideo() {\r\n\tplayer.stopVideo();\r\n}\r\n"]}